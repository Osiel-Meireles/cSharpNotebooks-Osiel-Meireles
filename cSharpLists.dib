#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

### List<>

Uma List<T> em C# é tipo uma caixa flexível onde você guarda várias coisas do mesmo tipo, e pode adicionar, remover, acessar e ordenar tudo de forma bem fácil.

O que dá pra fazer com ela:

- Add() → adiciona item

- Remove() → remove item

- Count → vê quantos tem

- Contains() → checa se tem algo

- Clear() → limpa tudo

- Sort() → ordena

#!markdown

### Inicializando uma List<>

#!csharp

List<string> listaString = new List<string>();

#!markdown

### Adicionando itens em uma List<>

#!csharp

listaString.Add("SP");
listaString.Add("BA");
listaString.Add("DF");

#!markdown

### Percorrendo uma List<> com for

#!csharp

for(int contador = 0; contador < listaString.Count; contador++) // Note que não usamos o método '.Length', como fazemos com arrays, para mensurar o tamanho da lista, mas sim o método '.Count'.
{
    Console.WriteLine("Índice Nº: " + contador + " | Item: " + listaString[contador]);
}

#!markdown

### Percorrendo uma List<> com foreach

#!csharp

int contador = 0;

foreach (var item in listaString)
{
    Console.WriteLine($"Índice: {contador} | Item: {item}");
    contador++;
}
